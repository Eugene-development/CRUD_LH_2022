"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"Indicates what fields are available at the top level of a query operation."
type Query {
    "Find a single user by an identifying attribute."
    user(
        "Search by primary key."
        id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"])

        "Search by email address."
        email: String @eq @rules(apply: ["prohibits:id", "required_without:id", "email"])
    ): User @find

    "List multiple users."
    users(
        "Filters by name. Accepts SQL LIKE wildcards `%` and `_`."
        name: String @where(operator: "like")
    ): [User!]! @paginate(defaultCount: 10)


    products(orderBy: _ @orderBy(columns: ["value"])): [Product] @all
    product(uuid: String @eq): Product @find
    product_where(key: Int @where(operator: "1234")): [Product] @all
    product_w(key: Int @eq, active: Boolean @eq): [Product] @all
    property: [Property] @all
    category: [Category] @all

}


type Mutation {
    updateProduct(uuid: String!, value: String!): Product @update
    deleteProduct(uuid: String!): Product @delete






    createCategory(input: CreateCategoryInput @spread): Category @create
    createProduct(input: CreateProductInput @spread): Product @create
    createProperty(input: CreatePropertyInput @spread): Property @create


}

input CreateCategoryInput {
    key: String!,
    value: String!
}
#
#input CreateCategoryBelongsTo {
#    create: CreateCategoryInput
#}



input CreateProductInput {
    key: String!,
    value: String!,
    active: Boolean,
    parentable_type: String,
    parentable_id: Int,
    #    category: CreateCategoryBelongsTo
    property: CreatePropertyMorphMany

}


input CreatePropertyMorphMany {
    create: [CreatePropertyInput]
}

input CreatePropertyInput {
    key: String,
    value: String!
}


"Account of a person who utilizes this application."
type User {
    "Unique primary key."
    id: ID!

    "Non-unique name."
    name: String!

    "Unique email address."
    email: String!

    "When the email was verified."
    email_verified_at: DateTime

    "When the account was created."
    created_at: DateTime!

    "When the account was last updated."
    updated_at: DateTime!
}


type Product {
    id: ID
    key: Int
    active: Boolean
    value: String
    parentable_type: String
    parentable_id: String
    property: [Property!] @morphMany
    parentable: Parentable! @morphTo
}


type Property {
    id: ID
    key: String
    active: Boolean
    value: String
    parentable_type: String
    parentable_id: String
    parentable: Product @morphTo
}

type Category {
    id: ID
    key: String
    active: Boolean
    uuid: String
    value: String
}

union Parentable = Product | Property | Category
