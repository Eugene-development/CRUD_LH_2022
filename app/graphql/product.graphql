extend type Query {
    products(orderBy: _ @orderBy(columns: ["value"])): [Product] @all
    product(id:ID! @eq): Product @find
    product_where(key: Int @where(operator: "1234")): [Product] @all
    product_w(key: Int @eq, active: Boolean @eq): [Product] @all
}

type Product {
    id: ID
    key: Int
    active: Boolean
    value: String
    slug: String
    parentable_type: String
    parentable_id: String
    property: [Property!] @morphMany
    parentable: Parentable! @morphTo
}

union Parentable = Product | Property | Category

extend type Mutation {
    createProduct(input: CreateProductInput @spread): Product @create
    updateProduct(input: UpdateProductInput @spread): Product @update
    deleteProduct(id: ID!): Product @delete
}



input CreateProductInput {
    key: String!
    active: Boolean
    value: String!
    slug: String
    parentable_type: String
    parentable_id: Int
    #    category: CreateCategoryBelongsTo
    property: CreatePropertyMorphMany
}
input CreatePropertyMorphMany {
    create: [CreatePropertyInput]
}
input CreatePropertyInput {
    key: String
    value: String!
    slug: String!
}

input UpdateProductInput {
    id: ID!
    value: String!
    property: UpdatePropertyMorphMany
}
input UpdatePropertyMorphMany {
    create: [CreatePropertyInput]
    update: [UpdatePropertyInput]
    delete: [ID!]
}
input UpdatePropertyInput {
    id: ID!
    value: String!
}
